--DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
--
--Copyright 2010 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de,
--All rights reserved.
--
--The contents of this file are subject to the terms of the Common
--Development and Distribution License("CDDL") (the "License"). You
--may not use this file except in compliance with the License. You can
--obtain a copy of the License at http://www.sun.com/cddl/cddl.html
--
--See the License for the specific language governing permissions and
--limitations under the License.  When distributing the software, include
--this License Header Notice in each file.  If applicable, add the following
--below the License Header, with the fields enclosed by brackets [] replaced
-- by your own identifying information:
--
--"Portions Copyrighted [year] [name of copyright owner]"
--
--Contributor(s):

connect 'jdbc:derby:bibiserv2;create=true' as BIBISERV2;

create table status (
    id varchar(100) primary key not null,
    toolname varchar(100),              -- name of tool
    statuscode int,                     -- statuscode as defined by HOBIT statuscodes
    description varchar(10000),         -- statusdescription as defined by HOBIT statusdescription
    internaldescription varchar(10000), -- a more detailed internal description
    drmaaid varchar(100),               -- job id used by this job within an GRID/CLOUD environment
    created timestamp,
    lastmod timestamp,
    stdout varchar(1000),
    stderr varchar(1000),
    userid varchar(100),                -- user started this job
    cputime int WITH DEFAULT 0,         -- cputime (minutes) consumed by this job
    diskspace int WITH DEFAULT 0,       -- spool diskspace (MB) used by this job
    memory int WITH DEFAULT 0           -- memory (MB) consumed by this job
);

create table item (
    id varchar(100),
    item clob,
    time timestamp,
    bar blob,
    md5 varchar(33),
    type varchar(20) default 'runnable' -- supported values are runnable, linked, default
);

create table modules (
    id varchar(100) primary key not null,
    info clob,
    file blob,
    active smallint default 0
);

create table structure (
    time timestamp,
    content clob
);


create table users (
    id varchar(100) primary key not null,
    limitclass varchar(100) not null,    -- id of limitation(=resource) class
    password varchar(100) not null,
    passwordreset smallint default 0,    -- force reset of password
    enabled smallint default 0,          -- derby doesn't have a boolean type
    name varchar(100) not null,
    surname varchar(100) not null,
    title varchar(20),
    mail varchar(100) not null,
    organisation varchar(100),
    phone varchar(100)
);

create table awscredentials (
   id varchar(100) not null,
   accesskey varchar(150) not null,
   secretkey varchar(250) not null,
   issessionkey varchar(3) not null,
   expirationtime varchar(6) not null,
   marked varchar(3) not null,
   isused varchar(3) not null,
   sessiontoken varchar(500) not null 
);

create table authorities (
    id varchar(100) not null,
    authority varchar(100) not null
);

create table authority (
    value varchar(20) not null unique
);


create table news (
    id varchar(100) not null,
    content clob,
    expired timestamp
);
    
create view manager_auth as select id as role , password, enabled as authorized from users;


-- insert example admin user
insert into users (id,password, limitclass, enabled, name, surname, mail) values (
    'testadmin',
    'simplepassword',
    'registered',
    1,
    'BiBi','Serv',
    'bibiadm@cebitec.uni-bielefeld.de'
);

insert into authority values (
    'ROLE_ADMIN'
);

insert into authority values (
    'ROLE_USER'
);

insert into authorities values (
    'testadmin', 'ROLE_ADMIN'
);

insert into authorities values (
    'testadmin', 'ROLE_USER'
);

-- insert example standard user
insert into users (id,password, limitclass, enabled, name, surname, mail) values (
    'testuser',
    'simplepassword',
    'registered',
    1,
    'Joe','User',
    'bibiadm@cebitec.uni-bielefeld.de');

insert into authorities values (
    'testuser', 'ROLE_USER'
);

--insert example standard awscredentials for testuser
insert into awscredentials (id,accesskey,secretkey,issessionkey,expirationtime,marked,isused) values (
       'testuser',
       'accesskey',
       'secretkey',
       'No',
	'7200',
	'No',
	'Yes',
	'sessiontoken'
);

create view status_admin as select * from status where id='admin';

-- resources table :
--  - defines limit classes
--  - stores resource consumption for each job (resource_id == status_id)
--  - stores summed up resource consumption for each user (resource_id == user_id)
create table resources (
    id varchar(100) primary key not null,
    runs int WITH DEFAULT 0,               -- concurrently possible runs
    cputime int WITH DEFAULT 0,            -- used cputime during a period of time (one week), measured in minutes
    diskspace int WITH DEFAULT 0,          -- used diskspace, measured in MB
    memory  int WITH DEFAULT 0             -- used memory
);

-- add two limition classes
-- unregistered can't run more than one job in parallel, consumes up to 30 minutes of cpu time, spool
-- data cleaned up after a short period of time
insert into resources values ('unregistered', 1, 30, -1, -1 );

-- registered users can run up to 10 jobs in parallel, consumes up to 10080 cpu minutes  (= 1 cpu week)
-- a week, uses up to 50 MB of spool disk space, currently no limits on memory usage)
insert into resources values ('registered', 10, 10080, 50, -1);

    
CREATE TABLE stats_clientinfo (
    sessionid character varying(50) NOT NULL,
    resolutionx integer,
    resolutiony integer,
    browsername character varying(50),
    browserversion character varying(50),
    os character varying(50),
    ip character varying(15),
    date timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE stats_toolclicks (
    toolname character varying(50) NOT NULL,
    date timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    location character varying(50) NOT NULL,
    sessionid character varying(100)
);

CREATE TABLE stats_toolerrors (
    toolname character varying(50) NOT NULL,
    date timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    location character varying(50) NOT NULL,
    ip character varying(15)
);

CREATE TABLE stats_categoryclicks (
    category character varying(50) NOT NULL,
    date timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    sessionid character varying(100)
);
    
CREATE TABLE stats_toolruntime (
    toolname character varying(45) NOT NULL,
    id character varying(50) NOT NULL,
    statuscode int NOT NULL,
    date timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    runtime bigint NOT NULL,
    sessionid character varying(100),
    description character varying(10000)
);

CREATE TABLE stats_toolsubmission (
    toolname character varying(50) NOT NULL,
    date timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    example character varying(1) DEFAULT 'n',
    stdparam character varying(1) DEFAULT 'y',
    sessionid character varying(100)
);
disconnect BIBISERV2;
