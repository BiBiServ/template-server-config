<?xml version="1.0" encoding="UTF-8"?>
<!-- This project can be used to configure an existing Glassfish Application Server V3 in a BiBiServ2 compatible way. -->

<project name="appserver_config" basedir="." default="configure" xmlns:contrib="antlib:net.sf.antcontrib" xmlns:ivy="antlib:org.apache.ivy.ant">

    <taskdef uri="antlib:net.sf.antcontrib"
        resource="net/sf/antcontrib/antlib.xml">
        <classpath path="${ant.lib.path}"/>
    </taskdef>
    
    <taskdef uri="antlib:org.apache.ivy.ant"
        resource="org/apache/ivy/ant/antlib.xml">
        <classpath path="${ant.lib.path}"/>
    </taskdef>
        

    <!-- directory definitions -->
    <property name="src" value="src"/>
    <property name="classes" value="classes"/>
    <property name="dist" value="dist"/>
    <property name="lib" value="lib"/>
    <property name="config" value="config"/>

    <!-- configuration files -->
    <property name="local.configuration" value="local.configuration"/>
    <property name="local.passwordfile" value="local.passwordfile"/>
   

    <!--  java version check -->
    
    <fail
        message="At least Java 7 is needed to compile '${ant.project.name}'. You are running ${java.version}, ${java.specification.version}, ${java.specification.name}">
        <condition>
            <not>
                <or>
                    <!-- any Java 7 release is supported -->
                    <equals arg1="${java.specification.version}" arg2="1.7" trim="yes"
                        casesensitive="no"/>
                    <!-- upcoming Java 8 release also supported -->
                    <equals arg1="${java.specification.version}" arg2="1.8" trim="yes"
                        casesensitive="no"/>
                </or>
            </not>
        </condition>
    </fail>

    
    <!-- Script to calculate the java db port and set the variable ${db.port} from the given portbase -->
    <scriptdef name="setPorts" language="javascript">
        <attribute name="portbase"/>
        <![CDATA[
        project.setNewProperty("db.port", (parseInt(attributes.get("portbase"))+27));
        project.setNewProperty("admin.port", (parseInt(attributes.get("portbase"))+48));
        project.setNewProperty("http.port", (parseInt(attributes.get("portbase"))+80));
        project.setNewProperty("https.port", (parseInt(attributes.get("portbase"))+81));
    ]]>
    </scriptdef>
    
    
    <macrodef name="check_port">
        <attribute name="port"/>
        <sequential>
            
            <fail message="Port @{port} is used by another process!">
                <condition>
                    <socket server="localhost" port="@{port}"/>
                </condition>
            </fail>
        </sequential>
        
        
    </macrodef>

    <!-- Make enviroment accessible by this script -->
    <property environment="env"/>

    <!-- default classpath -->
    <path id="classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    
    <!-- get information about host -->
    <hostinfo prefix="hostinfo"/>
    
    <target name="hostinfo" description="print information about host">
        <echo>NAME   - ${hostinfo.NAME}</echo>
        <echo>DOMAIN - ${hostinfo.DOMAIN}</echo>
        <echo>IPv4   - ${hostinfo.ADDR4}</echo>
        <echo>IPv6   - ${hostinfo.ADDR6}</echo>
    </target>

 

    <target name="configure" description="check environment and configure an existing glassfish domain.">

        <!-- check if local.configuration files exists -->
        <available file="local.configuration" property="config.present" value="true"/>
        <contrib:if>
            <not>
                <isset property="config.present"/>
            </not>
            <contrib:then>
                <echo>Configuration not present . Create a new one ... </echo>

                <!-- catalina root -->
                <contrib:if>
                    <isset property="env.CATALINA_HOME"/>
                    <contrib:then>
                        <property name="catalina.home" value="${env.CATALINA_HOME}"/>
                    </contrib:then>
                </contrib:if>
                <input message="Enter Glassfish root !" addproperty="catalina.home" defaultvalue="/vol/gf31"/>

                <!-- domain root -->
                <contrib:if>
                    <isset property="env.DOMAIN_HOME"/>
                    <contrib:then>
                        <property name="domain.dir" value="${env.DOMAIN_HOME}"/>
                    </contrib:then>
                </contrib:if>
                <input message="Enter domain root !" addproperty="domain.dir"  defaultvalue="/tmp"/>

                <!-- domain name -->
                <input message="Enter domain name !" addproperty="domain.name"  defaultvalue="bibidomain"/>

                <!-- server portbase -->
                <input message="Enter server portbase [e.g.: 8000] !" addproperty="server.portbase"  defaultvalue="8000"/>

                <!-- admin user -->
                <input message="Enter admin user [e.g. admin] !" addproperty="admin.user"  defaultvalue="admin"/>

                <!-- spool dir -->
                <input message="Enter spool dir ! [e.g. /var/tmp/spool ]" addproperty="spool.dir"  defaultvalue="/tmp/spool"/>

                <!-- executable root dir -->
                <input message="Enter executable root dir [e.g.: /vol/biotools] !" addproperty="executable.dir"  defaultvalue="/vol/biotools"/>

                <!-- compute port numbers for database and admin port -->
                <setPorts portbase="${server.portbase}"/>


                <!-- db host -->
                <property name="db.host"  value="${hostinfo.NAME}"/>

                <!-- db user -->
                <property name="db.user" value="bibiserv2"/>
                
                <!-- db pwd -->
                <script language="javascript">
                    <![CDATA[
    property = project.setProperty("db.pwd","db_"+Math.floor((new Date()).getTime()/1000));
  ]]>
                </script>

                <!-- write local configuration file -->
                <propertyfile file="${local.configuration}" comment="local bibiserv2 startup properties">
                    <entry key="catalina.home" value="${catalina.home}"/>
                    <entry key="domain.dir" value="${domain.dir}"/>
                    <entry key="domain" value="${domain.name}"/>
                    <entry key="admin.user" value="${admin.user}"/>
                    <entry key="spool.dir" value="${spool.dir}"/>
                    <entry key="executable.dir" value="${executable.dir}"/>
                    <entry key="server.portbase" value="${server.portbase}"/>
                    <entry key="db.port" value="${db.port}"/>
                    <entry key="admin.port" value="${admin.port}"/>
                    <entry key="db.host"  value="${db.host}"/>
                    <entry key="db.user" value="${db.user}"/>
                    <entry key="db.pwd" value="${db.pwd}"/>
                </propertyfile>

                <!-- change permission on local.configuration file -->
                <chmod file="${local.configuration}" perm="600"/>
            </contrib:then>
        </contrib:if>



        <available file="local.passwordfile" property="passwordfile.present" value="true"/>

        <contrib:if>
            <not>
                <isset property="passwordfile.present"/>
            </not>
            <contrib:then>
                <echo>Passwordfile not present. Create a new one ... </echo>

                <!-- password -->
                <input message="Enter admin user password [e.g. admin] !" addproperty="admin.password"  defaultvalue="admin"/>

                <!-- master password -->
                <input message="Enter Master password [e.g. changeit] !" addproperty="masterpassword" defaultvalue="changeit"/>

                <!-- write password file -->
                <propertyfile file="${local.passwordfile}">
                    <entry key="AS_ADMIN_PASSWORD" value="${admin.password}"/>
                    <entry key="AS_ADMIN_MASTERPASSWORD" value="${masterpassword}"/>
                    <entry key="AS_ADMIN_DBPASSWORD" value="${db.pwd}"/>
                </propertyfile>

                <!-- change permission on password file -->
                <chmod file="local.passwordfile" perm="600"/>

            </contrib:then>
            <contrib:else>
                <!-- update database password file -->
                <propertyfile file="${local.passwordfile}">
                    <entry key="AS_ADMIN_DBPASSWORD" value="${db.pwd}"/>
                </propertyfile>
            </contrib:else>
        </contrib:if>

        <!-- add appserver_config ant task -->
        
        <contrib:if>
            <not>
                <available file="${dist}/appserver_config_task.jar"/>
            </not>
            <contrib:then>
                <antcall target="build"/>
            </contrib:then>
        </contrib:if>

        <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
            <classpath>
                <path  location="${dist}/appserver_config_task.jar"/> 
                <path refid="classpath"/>
            </classpath>
        </taskdef>
            

        <!-- load configuration -->
        <property file="local.configuration"/>
        <!-- recompute port numbers for database and admin port -->
        <setPorts portbase="${server.portbase}"/>
        <!-- check if port numbers are free -->
        <check_port port="${admin.port}"/>
        <check_port port="${http.port}"/>
        <check_port port="${https.port}"/>
        <check_port port="${db.port}"/>
        
        <!-- create basic domain with asadmin -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-domain"/>
            <arg value="--portbase=${server.portbase}"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="--savemasterpassword=true"/>
            <arg value="${domain}"/>
        </exec>

        <!-- check if a database named bibiserv2 exist -->
        <available file="${domain.dir}/${domain}/db/bibiserv2" type="dir" property="bibiserv2.present" value="true"/>
        <contrib:if>
            <not>
                <isset property="bibiserv2.present"/>
            </not>
            <contrib:then>

                <echo> Database 'bibiserv2' does not exist, create database 'bibiserv2' with tables 'status', 'structure', 'item and 'manager_auth'</echo>

                <!-- create db base directory -->
                <mkdir dir="${domain.dir}/${domain}/db"/>
                
                <!-- create derby.properties -->
                
                <propertyfile file="${domain.dir}/${domain}/db/derby.properties">
                    <entry key="derby.connection.requireAuthentication" value="true"/>
                    <entry key="derby.authentication.provider" value="BUILTIN"/>
                    <entry key="derby.user.${db.user}" value="${db.pwd}"/>
                </propertyfile>
                <chmod file="${domain.dir}/${domain}/db/derby.properties" perm="600"/> 
                

                <!-- start database for live configuration -->
                <ant target="_start_db"/>

                <!-- replace ${db.host}, ${db.port}, {db.user} and ${db.password} in initialize file -->
                <delete file="${basedir}/local.initialize_db.javadb"/>
                <copy file="${basedir}/${config}/initialize_db.javadb" tofile="${basedir}/local.initialize_db.javadb"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.HOST" value="${db.host}"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.PORT" value="${db.port}"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.USER" value="${db.user}"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.PWD" value="${db.pwd}"/>
                <chmod file="${basedir}/local.initialize_db.javadb" perm="600"/>
                                
                <exec executable="${catalina.home}/javadb/bin/ij" failifexecutionfails="true" failonerror="true">
                    <arg value="${basedir}/local.initialize_db.javadb"/>
                    <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
                </exec>
                
                             
                <structure2database src="${basedir}/${config}/BiBiServ.xml" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}" embedded="false"/>
                
                <!-- stop database - live configuration finished -->
                <ant target="_stop_db"/>
                
                
            </contrib:then>
            <contrib:else>
                <echo> Database bibiserv2 exists. Check manually if database is valid! </echo>
            </contrib:else>
        </contrib:if>
            
          
            
        

        
        <contrib:if>
            <available file="${domain.dir}/${domain}/config/bibiserv.properties.xml"/>
            <contrib:then>
                <input message="BiBiServ Properties file (${domain.dir}/${domain}/config/bibiserv_config.xml) is present! Overwrite (Y/N)?" validargs="Y,y,N,n" addproperty="overwrite"/>
            </contrib:then>
        </contrib:if>

        <contrib:if>
            <or>
                <not>
                    <available file="${domain.dir}/${domain}/config/bibiserv.properties.xml"/>
                </not>
                <isset property="overwrite"/>
            </or>
            <contrib:then>

                <!-- copy xml property -->
                <xml2prop src="${basedir}/config/bibiserv_config.xml" dest="${basedir}/bibiserv_config.properties"/>

                <propertyfile file="bibiserv_config.properties">
                    <entry key="lsub.bin" value="${domain.dir}/${domain}/bin/lsub"/>
                    <entry key="spooldir.base" value="${spool.dir}"/>
                    <entry key="tmpdir.base" value="${spool.dir}/tmp"/>
                    <entry key="executable.rootpath" value="${executable.dir}"/>
	                <entry key="aws.bin" value="${domain.dir}/${domain}/bin/aws/"/>
                    <entry key="db.host" value="${db.host}"/>
                    <entry key="db.port" value="${db.port}"/>
                    <entry key="db.user" value="${db.user}"/>
                    <entry key="db.pwd" value="${db.pwd}"/>
                </propertyfile>

                <prop2xml src="${basedir}/bibiserv_config.properties" dest="${domain.dir}/${domain}/config/bibiserv_config.xml"/>


                <echo>BiBiServ configuration file generated and copied to '${domain.dir}/${domain}/config/bibiserv_config.xml'.
                    Feel free to modify this configuration. Some things you MAY/SHOULD change in an production environment.
                    - lsub.bin, qsub.bin
                    - lsub.cpu and lsub.mem : the predefined values consider only VERY small jobs, if you run the Appserver on a high powered
                    machine or the runnings jobs have other constraints you may increase these values.
                    - spooldir.base must be accessible from all (compute grid) knots (if you use SGE compute grid to distribute your jobs)
                </echo>

            </contrib:then>
        </contrib:if>

      
        <copy overwrite="true" tofile="${catalina.home}/glassfish/lib/endorsed/log4j.jar">
             <!--This must return only ONE file, otherwise the copy task breaks!-->
            <fileset dir="${lib}">
                <filename name="**/log4j*.jar"/>
            </fileset>
        </copy>

        <copy overwrite="true" tofile="${catalina.home}/glassfish/lib/endorsed/xercesImpl.jar">
             <!--This must return only ONE file, otherwise the copy task breaks!-->
            <fileset dir="${lib}">
                <filename name="**/xercesImpl*.jar"/>
            </fileset>
        </copy>

        <!-- copy lsub command to ${domain.dir}/${domain}/bin/lsub -->
        <copy file="bin/lsub" todir="${domain.dir}/${domain}/bin"/>
        <chmod file="${domain.dir}/${domain}/bin/lsub" perm="755"/>

	    <!-- copy aws stuff -->
        <copy todir="${domain.dir}/${domain}/bin/aws">
            <fileset dir="bin/aws"/>
        </copy>
        <!-- <copydir src="bin/aws" dest="${domain.dir}/${domain}/bin/aws"/> -->
        <chmod file="${domain.dir}/${domain}/bin/aws/**" perm="755" type="both"/>



        <!-- start server instance for live configuration -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>

        <!-- modify configuration of glassfish domain -->
        <!-- append System Property : de.unibi.techfak.bibiserv.config -->
        
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-system-properties"/>
            <arg value="de.unibi.techfak.bibiserv.config=${domain.dir}/${domain}/config/bibiserv_config.xml:de.unibi.cebitec.bibiserv.manager.bardir=${bar.dir}"/>
        </exec>

        <!-- append Connection Pool for previously generated DB -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-jdbc-connection-pool"/>
            <arg value="--allownoncomponentcallers=false"/>
            <arg value="--associatewiththread=false"/>
            <arg value="--creationretryattempts=0"/>
            <arg value="--creationretryinterval=10"/>
            <arg value="--leakreclaim=false"/>
            <arg value="--leaktimeout=0"/>
            <arg value="--validationmethod=auto-commit"/>
            <arg value="--datasourceclassname=org.apache.derby.jdbc.ClientDataSource"/>
            <arg value="--failconnection=false"/>
            <arg value="--idletimeout=300"/>
            <arg value="--isconnectvalidatereq=false"/>
            <arg value="--isisolationguaranteed=false"/>
            <arg value="--lazyconnectionassociation=false"/>
            <arg value="--lazyconnectionenlistment=false"/>
            <arg value="--matchconnections=false"/>
            <arg value="--maxconnectionusagecount=0"/>
            <arg value="--maxpoolsize=32"/>
            <arg value="--maxwait=60000"/>
            <arg value="--nontransactionalconnections=false"/>
            <arg value="--poolresize=2"/>
            <arg value="--restype=javax.sql.DataSource"/>
            <arg value="--statementtimeout=1"/>
            <arg value="--steadypoolsize=8"/>
            <arg value="--validateatmostonceperiod=0"/>
            <arg value="--wrapjdbcobjects=false"/>
            <arg value="--property"/>
            <arg value="TraceFileAppend=false:RetrieveMessageText=true:SecurityMechanism=3:DatabaseName=bibiserv2:Password=${db.pwd}:LoginTimeout=0:User=${db.user}:PortNumber=${db.port}:ServerName=${db.host}:TraceLevel=-1"/>
            <arg value="bibiserv2_derby"/>
        </exec>

        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-jdbc-resource"/>
            <arg value="--connectionpoolid=bibiserv2_derby"/>
            <arg value="--enabled=true"/>
            <arg value="jdbc/bibiserv2"/>
        </exec>

        <!-- live configuration done, stop server instance -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="stop-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>
    
        <!-- set jvm option -XX:MaxPermSize=512m ; using asadmin create-jvm-options doesn't work beacuse ':' is
            used as delimiter -->
        <replace file="${domain.dir}/${domain}/config/domain.xml" token="-XX:MaxPermSize=192m" value="-XX:MaxPermSize=512m"/>
            
    </target>

    <target name="_start_domain" depends="_load_config" description="start the Glassfish">
        <check_port port="${admin.port}"/>
        <check_port port="${http.port}"/>
        <check_port port="${https.port}"/>
        <!-- start glassfish -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>            
            <arg value="${domain}"/>
        </exec>
    </target>
    
    

    <target name="start" depends="_load_config,_start_db,_start_domain" description="start the Glassfish AND the JavaDB Server"/>
    
    <target name="_debug_domain" depends="_load_config" description="start Glassfish appserver in debug mode">
        <!-- start glassfish in debug mode-->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="--debug"/>
            <arg value="${domain}"/>
        </exec>
    </target>
    

    <target name="debug" depends="_load_config,_start_db,_debug_domain" description="start the Glassfish and the JavaDB in DEBUG mode"/>
       
    <target name="_stop_domain" depends="_load_config" description="stop the Glassfish">
        <!-- stop glassfish -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="stop-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>
    </target>
    
    <target name="clean-db" depends="_load_config" description="clean up item entries within database">
        <exec executable="${catalina.home}/javadb/bin/ij" dir="${domain.dir}/${domain}/db" failifexecutionfails="true" failonerror="true">
            <arg value="${basedir}/${config}/clean_item.javadb"/>
            <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
        </exec>
        
    </target>

    <target name="stop" depends="_load_config" description="stop the Glassfish AND JavaDB Server">
        <antcall target="_stop_domain"/>       
        <antcall target="_stop_db"/>
    </target>

    <target name="build" depends="resolve" description="compile and build ant task needed to run this build script">
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
        <javac srcdir="${src}" encoding="utf-8" destdir="${classes}" debug="true" classpathref="classpath"/>
        <copy file="${src}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" tofile="${classes}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties"/>
        <jar basedir="${classes}" destfile="${dist}/appserver_config_task.jar" includes="**/*"/>
    </target>

    <target name="distribution" depends="build" description="create zip distribution of project">
        <zip basedir="." destfile="${ant.project.name}.zip" >
            <zipfileset dir="." prefix="${ant.project.name}/">
                <include name="src/**"/>
                <include name="bin/**"/>
                <include name="config/**"/>
                <include name="build.xml"/>
                <include name="ivy.xml"/>
            </zipfileset>
            <exclude name="**"/>
        </zip>
        <checksum algorithm="md5" format="CHECKSUM" file="${ant.project.name}.zip"/>
    </target>

    <target name="clean" description="clean compiled classes and distribution jar">
        <delete dir="${dist}"/>
        <delete dir="${classes}"/>
        <delete dir="${lib}"/>
        <delete file="appserver_config.zip"/>
    </target>

    <target name="clean-all" depends="clean" description="clean really everything (Attention! Also, previous generated local appserver configuration files are deleted!)">
        <delete>
            <fileset file="local.*"/>
        </delete>
    </target>

    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

    <!-- set ivy.settings.file property -->
    <contrib:if>
        <http url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml" errorsbeginat="300"/>
        <contrib:then>
            <echo>Loading Ivy Settings from BiBiServ ... </echo>
            <ivy:settings url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml"/>
        </contrib:then>
        <contrib:else>
            <echo>BiBiserv not available, load Ivy settings from ${user.home}/ivy-rep/ivy-settings.xml or if this file does not exist load default settings file</echo>
            <ivy:settings file="${user.home}/ivy-rep/ivysettings.xml"/>
        </contrib:else>
    </contrib:if>

    <!-- use ivy to resolve  library dependencies -->
    <target name="resolve" description="retrieve dependencies with ivy">
        <mkdir dir="${lib}"/>
        <ivy:retrieve/> 
    </target>

    <!-- publish current project in private ivy-repository -->
    <target name="publish" depends="resolve,_mercurial" description="publish package as module on local ivy repository">
        <ivy:publish resolver="private" validate="false" overwrite="true"
                     artifactspattern="${dist.dir}/[artifact].[ext]" pubrevision="${HG.TAG}_${HG.REVISION}"/>
    </target>

    <target name="clean-cache" description="clean ivy cache">
        <ivy:cleancache/>
    </target>

    <!-- install package from local ivy-repository on the server -->
    <target name="install" depends="distribution"
            description="install as zipped recource on bibiserv : ssh.user, ssh.key and ssh.passphrase(optional) must set as property!">
       
        <!-- load ssh specify setting from bibiserv -->
        <property url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivy_ssh.properties"/>

        <!-- check if ${ssh.key} and ${ssh.user} is set -->
        <fail unless="ssh.user"
              message="The Target &lt;install&gt; uses ssh key based authentication. Give the ssh user for ${ssh.host} as property 'ssh.user' as argument to the ant call!"/>
        <fail unless="ssh.key"
              message="The Target &lt;install&gt; uses ssh key based authentication. Give the location of your private key as property 'ssh.key' and optional a passphrase as property 'ssh.passphrase' as argument to the ant call!"/>

        <!-- copy local ivy-rep to bibiserv using porta.techfak.uni-bielefeld.de -->
        
        <!-- remove remote files -->
        <sshexec host="${ssh.host}" username="${ssh.user}" keyfile="${ssh.key}"
            passphrase="${ssh.passphrase}"
            command="rm ${ssh.basedir}/resources/${ant.project.name}.*"/>
        
        <!-- install zip files -->
        <scp todir="${ssh.user}@${ssh.host}:${ssh.basedir}/resources" passphrase="${ssh.passphrase}"
             keyfile="${ssh.key}">
            <fileset file="${ant.project.name}.zip"/>
            <fileset file="${ant.project.name}.zip.md5"/>
        </scp>

     
    </target>

    <!-- targets for internal use only -->
    <target name="_mercurial" description="get the latest tag name and revision number">
        <exec executable="bash" outputproperty="HG.TAG" failifexecutionfails="true" failonerror="true">
            <arg line="-c "/>
            <arg value="hg tags | head -n 2 | grep -v tip |  cut -f 1 -d ' '  "/>
        </exec>
        <exec executable="bash" outputproperty="HG.REVISION" failifexecutionfails="true" failonerror="true">
            <arg line="-c "/>
            <arg value="hg tip | grep changeset: | cut -f 2 -d ':' | sed -e 's/^ *//' "/>
        </exec>
    </target>

    <target name="_start_db" depends="_load_config" description="(internal task) start the database">
        <check_port port="${db.port}"/>
        <!-- start database NOT using asadmin and run Java directly with SecurityManager explicity switched off 
            
            According to Java™ SE Development Kit 7, Update 51 Release Notes
            Change in Default Socket Permissions

            The default socket permissions assigned to all code including untrusted code have been changed 
            in this release. Previously, all code was able to bind any socket type to any port number greater 
            than or equal to 1024. It is still possible to bind sockets to the ephemeral port range on each 
            system. The exact range of ephemeral ports varies from one operating system to another, but it is 
            typically in the high range (such as from 49152 to 65535). The new restriction is that binding 
            sockets outside of the ephemeral range now requires an explicit permission in the system security 
            policy.

            Most applications using client tcp sockets and a security manager will not see any problem, as these 
            typically bind to ephemeral ports anyway. Applications using datagram sockets or server tcp sockets 
            (and a security manager) may encounter security exceptions where none were seen before. If this occurs, 
            users should review whether the port number being requested is expected, and if this is the case, a 
            socket permission grant can be added to the local security policy, to resolve the issue.
        
        
        -->        
        <java classname="org.apache.derby.drda.NetworkServerControl" dir="${domain.dir}/${domain}/db" fork="true" spawn="true" >
            <arg line="start"/>
            <arg line="-h ${db.host}"/>
            <arg line="-p ${db.port}"/>
            <arg line="-noSecurityManager"/>
            <classpath>
                <fileset dir="${catalina.home}/javadb/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
        <!-- wait for db server startup -->
        <waitfor maxwait="30" maxwaitunit="second"  checkevery="5" timeoutproperty="database.start.timeout">
            <socket server="${db.host}" port="${db.port}"/>
        </waitfor>
        <fail if="database.start.timeout" message="Database startup failed (timeout after 30 seconds)!"/>
        <echo message="Database startet on host ${db.host}:${db.port}"/>
    </target>


    <target name="_stop_db" depends="_load_config" description="(internal task) stop the database">
        <!-- stop database -->
        <exec executable="${catalina.home}/bin/asadmin"  >
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="stop-database"/>
            <arg value="--dbport=${db.port}"/>
            <arg value="--dbhost=${db.host}"/>
            <arg value="--dbuser=${db.user}"/>
            
        </exec>
        
      
    </target>
    
    
    <target name="_test_db" depends="_load_config" description="test task for database startup failure ...">
        
        <!-- uncomment following -->
        <ant target="_start_db" inheritAll="false" />
        
        
       <exec executable="${catalina.home}/javadb/bin/ij" failifexecutionfails="true" failonerror="true">
            <arg value="${basedir}/local.initialize_db.javadb"/>
            <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
        </exec>
                  
        <structure2database src="${basedir}/${config}/BiBiServ.xml" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}" embedded="false"/>

        <ant target="_stop_db" inheritAll="false"/> 
       
    </target>

    <target name="_load_config" description="(internal task) load configuration from file">
        <!-- check if configuration file exists -->
        <available file="local.configuration" property="config.present" value="true"/>
        <contrib:if>
            <not>
                <isset property="config.present"/>
            </not>
            <contrib:then>
                <antcall target="configure"/>
            </contrib:then>
        </contrib:if>
        <!-- load configuration -->
        <property file="local.configuration"/>
        
        <!-- recompute port numbers for database and admin port -->
        <setPorts portbase="${server.portbase}"/>
        
    </target>
    
    <target name="_test">
        <!-- load configuration -->
        <property file="local.configuration"/>
        <!-- recompute port numbers for database and admin port -->
        <setPorts portbase="${server.portbase}"/>
        <!-- load tasks -->
        <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" classpath="${dist}/appserver_config_task.jar"/>
        <!-- put item to database -->
        
        <item2database src="${config}/administration_team.xml" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}"/>
        
    </target>
    
    <target name="install.item" description="install an item (xml decsription file) to database">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
            
        <contrib:if>
            <and>
                <isset property="item"/>
                <available file="${item}"/>  
            </and>
            <contrib:then>
                <!-- load tasks -->
                <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
                    <classpath>
                        <path  location="${dist}/appserver_config_task.jar"/> 
                        <path refid="classpath"/>
                    </classpath>
                </taskdef>
               
                <!-- put item to database -->
                <item2database src="${item}" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}"/>
            </contrib:then>
            <contrib:else>
                <fail message="You must set an item property (-Ditem=...) pointing to an existing item description file!"/>
            </contrib:else>
        </contrib:if>
    </target>
    
    <target name="install.linkeditem" description="install a linked item (xml description file) to database">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        <contrib:if>
            <and>
                <isset property="linkeditem"/>
                <available file="${linkeditem}"/>  
            </and>
            <contrib:then>
                <!-- load tasks -->
                <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
                    <classpath>
                        <path  location="${dist}/appserver_config_task.jar"/> 
                        <path refid="classpath"/>
                    </classpath>
                </taskdef>
                <!-- put item to database -->
                <linkeditem2database src="${linkeditem}" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}"/>
            </contrib:then>
            <contrib:else>
                <fail message="You must set a linkeditem property (-Dlinkeditem=...) pointing to an existing linkeditem description file!"/>
            </contrib:else>
        </contrib:if>
    </target>
    
    <target name="install.module" description="install a module (car file) to database">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        <contrib:if>
            <and>
                <isset property="module"/>
                <available file="${module}"/>  
            </and>
            <contrib:then>
                <!-- load tasks -->
                <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
                    <classpath>
                        <path  location="${dist}/appserver_config_task.jar"/> 
                        <path refid="classpath"/>
                    </classpath>
                </taskdef>
                <!-- put module to database -->
                <module2database src="${module}" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}"/>
            </contrib:then>
            <contrib:else>
                <fail message="You must set a module property (-Dmodule=...) pointing to an existing module archive (car file)!"/>
            </contrib:else>
        </contrib:if>
    </target>
    
    <target name="install.app" description="install an application/tool (bar file) to database">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        <contrib:if>
            <and>
                <isset property="app"/>
                <available file="${app}"/>  
            </and>
            <contrib:then>
                <!-- load tasks -->
                <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
                    <classpath>
                        <path  location="${dist}/appserver_config_task.jar"/> 
                        <path refid="classpath"/>
                    </classpath>
                </taskdef>
                <!-- put app to database -->
                <app2database src="${app}" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}"/>
            </contrib:then>
            <contrib:else>
                <fail message="You must set a app property (-Dapp=...) pointing to an existing BiBiServ archive (bar) file!"/>
            </contrib:else>
        </contrib:if>
    </target>
    
    <target name="install.structure" description="install a bibiserv structure to database - Attention : handle with care!">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        <contrib:if>
            <and>
                <isset property="structure"/>
                <available file="${structure}"/>  
            </and>
            <contrib:then>
                <!-- load tasks -->
                <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
                    <classpath>
                        <path  location="${dist}/appserver_config_task.jar"/> 
                        <path refid="classpath"/>
                    </classpath>
                </taskdef>
                <!-- put app to database -->
                <structure2database src="${structure}" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}" embedded="false"/>
 
            </contrib:then>
            <contrib:else>
                <fail message="You must set a structure property (-Dstructure=...) pointing to an existing bibiserv structure file!"/>
            </contrib:else>
        </contrib:if>
    </target>
    
    
    <target name="run.sql" description="Run an external sql [-Dsql=...] on database. Database server must run. Attention: Handle with care!">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        
        <contrib:if>
            <and>
                <isset property="sql"/>
                <available file="${sql}"/>  
            </and>
            <contrib:then>
        
                <delete file="${basedir}/local.sql"/>
        
        <copy file="${sql}" tofile="${basedir}/local.sql"/>
        <replace file="${basedir}/local.sql" token="DB.HOST" value="${db.host}"/>
        <replace file="${basedir}/local.sql" token="DB.PORT" value="${db.port}"/>
        <replace file="${basedir}/local.sql" token="DB.USER" value="${db.user}"/>
        <replace file="${basedir}/local.sql" token="DB.PWD" value="${db.pwd}"/>
        <chmod file="${basedir}/local.sql" perm="600"/>
        
                <exec executable="${catalina.home}/javadb/bin/ij" failifexecutionfails="true" failonerror="true">
            <arg value="${basedir}/local.sql"/>
            <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
        </exec>
        
        
                
                </contrib:then>
                <contrib:else>
                    <fail message="You must set a sql property (-Dsql=...) pointing to an existing sql file!"/>
                </contrib:else>
        </contrib:if>
    </target>
    
    
    <target name="config.OGE" description="Update previous configured domain to support native OGE DRMAA support. Server restart needed!">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        
        <!-- check for DRMAA.jar -->
        <contrib:if>
            <not>
            <and>
                <isset property="drmaa.jar"/>
                <available file="${drmaa.jar}"/>
            </and>
            </not>
            <contrib:then>
                <fail message="To configure OGE system property drmaa.jar must point to an existing drmaa library"/>
            </contrib:then>
        </contrib:if>
        <!-- check for library path -->
        <contrib:if>
            <not>
                <and>
                    <isset property="drmaa.library.path"/>
                    <available file="${drmaa.library.path}" type="dir"/>
                </and>
            </not>
            <contrib:then>
                <fail message="To configure OGE system property drmaa.library.path  must point to an existing drmaa library path"/>
            </contrib:then>      
        </contrib:if>
        
        <!-- add system property -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-jvm-options"/>
            <arg value="-Djava.library.path=${drmaa.library.path}"/>
        </exec>
        
        <!-- set native library path -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="set"/>
            <arg value="server.java-config.native-library-path-prefix=${drmaa.library.path}"/>
        </exec>
        

    </target>
    
    <target name="config.64Bit" description="Update previous configured domain to start in 64 Bit mode (needs a 64 Bit capable Java Runtime Environment. Server restart needed!">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        
        <!-- add system property -->
        <exec executable="${catalina.home}/bin/asadmin" failifexecutionfails="true" failonerror="true">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-jvm-options"/>
            <arg value="-d64"/>
        </exec> 
    </target>
    
    <target name="_configure_db">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        <!-- check if a database named bibiserv2 exist -->
        <available file="${domain.dir}/${domain}/db/bibiserv2" type="dir" property="bibiserv2.present" value="true"/>
        <contrib:if>
            <not>
                <isset property="bibiserv2.present"/>
            </not>
            <contrib:then>
                
                <echo> Database 'bibiserv2' does not exist, create database 'bibiserv2' with tables 'status', 'structure', 'item and 'manager_auth'</echo>
                
                <!-- create db base directory -->
                <mkdir dir="${domain.dir}/${domain}/db"/>
                
                <!-- create derby.properties -->
                
                <propertyfile file="${domain.dir}/${domain}/db/derby.properties">
                    <entry key="derby.connection.requireAuthentication" value="true"/>
                    <entry key="derby.authentication.provider" value="BUILTIN"/>
                    <entry key="derby.user.${db.user}" value="${db.pwd}"/>
                </propertyfile>
                <chmod file="${domain.dir}/${domain}/db/derby.properties" perm="600"/> 
                
                
                <!-- start database for live configuration -->
                <ant  target="_start_db"/>
                
                <!-- replace ${db.host}, ${db.port}, {db.user} and ${db.password} in initialize file -->
                <delete file="${basedir}/local.initialize_db.javadb"/>
                <copy file="${basedir}/${config}/initialize_db.javadb" tofile="${basedir}/local.initialize_db.javadb"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.HOST" value="${db.host}"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.PORT" value="${db.port}"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.USER" value="${db.user}"/>
                <replace file="${basedir}/local.initialize_db.javadb" token="DB.PWD" value="${db.pwd}"/>
                <chmod file="${basedir}/local.initialize_db.javadb" perm="600"/>
                
                <exec executable="${catalina.home}/javadb/bin/ij" failifexecutionfails="true" failonerror="true">
                    <arg value="${basedir}/local.initialize_db.javadb"/>
                    <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
                </exec>
                
                
                <structure2database src="${basedir}/${config}/BiBiServ.xml" dbURL="jdbc:derby://${db.host}:${db.port}/bibiserv2;user=${db.user};password=${db.pwd}" embedded="false"/>
                
                <!-- stop database - live configuration finished -->
                <ant target="_stop_db"/>
                
                
            </contrib:then>
            <contrib:else>
                <echo> Database bibiserv2 exists. Check manually if database is valid! </echo>
            </contrib:else>
        </contrib:if>
    </target>
    
</project>
