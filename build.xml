<?xml version="1.0" encoding="UTF-8"?>
<!-- This project can be used to configure an existing Glassfish Application Server V3 in a BiBiServ2 compatible way. -->

<project name="appserver_config" basedir="." default="configure" xmlns:contrib="antlib:net.sf.antcontrib" xmlns:ivy="antlib:org.apache.ivy.ant">

    <taskdef uri="antlib:net.sf.antcontrib"
        resource="net/sf/antcontrib/antlib.xml">
        <classpath path="${ant.lib.path}"/>
    </taskdef>
    
    <taskdef uri="antlib:org.apache.ivy.ant"
        resource="org/apache/ivy/ant/antlib.xml">
        <classpath path="${ant.lib.path}"/>
    </taskdef>
        

    <!-- directory definitions -->
    <property name="src" value="src"/>
    <property name="classes" value="classes"/>
    <property name="dist" value="dist"/>
    <property name="lib" value="lib"/>
    <property name="config" value="config"/>

    <!-- configuration files -->
    <property name="local.configuration" value="local.configuration"/>
    <property name="local.passwordfile" value="local.passwordfile"/>

    <!-- jboss expression language library, necessary until standard
    JSF (2.0) with its own EL is supported by ICEfaces -->
    <property name="jboss_el" value="jboss_el.jar"/>

    <!-- the web application archive of the bibi main app,
    allowing for an instantly runnable bibi-server after running this
    configuration -->
    <property name="bibimainapp" value="bibimainapp.war"/>

    
    <!-- Script to calculate the java db port and set the variable ${db.port} from the given portbase -->
    <scriptdef name="setPorts" language="javascript">
        <attribute name="portbase"/>
        <![CDATA[
        project.setNewProperty("db.port", (parseInt(attributes.get("portbase"))+27));
        project.setNewProperty("admin.port", (parseInt(attributes.get("portbase"))+48));
    ]]>
    </scriptdef>

    <!-- Make enviroment accessible by this script -->
    <property environment="env"/>

    <!-- default classpath -->
    <path id="classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>


    <target name="configure" description="check environment and configure an existing glassfish domain.">

        <!-- check if local.configuration files exists -->
        <available file="local.configuration" property="config.present" value="true"/>
        <contrib:if>
            <not>
                <isset property="config.present"/>
            </not>
            <contrib:then>
                <echo>Configuration not present . Create a new one ... </echo>

                <!-- catalina root -->
                <contrib:if>
                    <isset property="env.CATALINA_HOME"/>
                    <contrib:then>
                        <property name="catalina.home" value="${env.CATALINA_HOME}"/>
                    </contrib:then>
                </contrib:if>
                <input message="Enter Glassfish root !" addproperty="catalina.home" defaultvalue="/vol/gf31"/>

                <!-- domain root -->
                <contrib:if>
                    <isset property="env.DOMAIN_HOME"/>
                    <contrib:then>
                        <property name="domain.dir" value="${env.DOMAIN_HOME}"/>
                    </contrib:then>
                </contrib:if>
                <input message="Enter domain root !" addproperty="domain.dir"  defaultvalue="/tmp"/>

                <!-- domain name -->
                <input message="Enter domain name !" addproperty="domain.name"  defaultvalue="bibidomain"/>

                <!-- server portbase -->
                <input message="Enter server portbase [e.g.: 8000] !" addproperty="server.portbase"  defaultvalue="8000"/>

                <!-- admin user -->
                <input message="Enter admin user [e.g. admin] !" addproperty="admin.user"  defaultvalue="admin"/>

                <!-- spool dir -->
                <input message="Enter spool dir ! [e.g. /var/tmp/spool ]" addproperty="spool.dir"  defaultvalue="/tmp/spool"/>

                <!-- executable root dir -->
                <input message="Enter executable root dir [e.g.: /vol/biotools] !" addproperty="executable.dir"  defaultvalue="/vol/biotools"/>

                <!-- compute port numbers for database and admin port -->
                <setPorts portbase="${server.portbase}"/>

                <!-- write local configuration file -->
                <propertyfile file="${local.configuration}" comment="local bibiserv2 startup properties">
                    <entry key="catalina.home" value="${catalina.home}"/>
                    <entry key="domain.dir" value="${domain.dir}"/>
                    <entry key="domain" value="${domain.name}"/>
                    <entry key="admin.user" value="${admin.user}"/>
                    <entry key="spool.dir" value="${spool.dir}"/>
                    <entry key="executable.dir" value="${executable.dir}"/>
                    <entry key="server.portbase" value="${server.portbase}"/>
                    <entry key="db.port" value="${db.port}"/>
                    <entry key="admin.port" value="${admin.port}"/>
                </propertyfile>

            </contrib:then>
        </contrib:if>



        <available file="local.passwordfile" property="passwordfile.present" value="true"/>

        <contrib:if>
            <not>
                <isset property="passwordfile.present"/>
            </not>
            <contrib:then>
                <echo>Passwordfile not present. Create a new one ... </echo>

                <!-- password -->
                <input message="Enter admin user password [e.g. adminadmin] !" addproperty="admin.password"  defaultvalue="admin"/>

                <!-- master password -->
                <input message="Enter Master password [e.g. changeit] !" addproperty="masterpassword" defaultvalue="changeit"/>

                <!-- write password file -->
                <propertyfile file="${local.passwordfile}">
                    <entry key="AS_ADMIN_PASSWORD" value="${admin.password}"/>
                    <entry key="AS_ADMIN_MASTERPASSWORD" value="${masterpassword}"/>
                </propertyfile>

                <!-- change permission on password file -->
                <chmod file="local.passwordfile" perm="600"/>

            </contrib:then>
        </contrib:if>

        <!-- add appserver_config ant task -->
        
        <contrib:if>
            <not>
                <available file="${dist}/appserver_config_task.jar"/>
            </not>
            <contrib:then>
                <antcall target="build"/>
            </contrib:then>
        </contrib:if>

        <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
            <classpath>
                <path  location="${dist}/appserver_config_task.jar"/> 
                <path refid="classpath"/>
            </classpath>
        </taskdef>
            

        <!-- load configuration -->
        <property file="local.configuration"/>
        <!-- recompute port numbers for database and admin port -->
        <setPorts portbase="${server.portbase}"/>
        <!-- create basic domain with asadmin -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-domain"/>
            <arg value="--portbase=${server.portbase}"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="--savemasterpassword=true"/>
            <arg value="${domain}"/>
        </exec>

        <!-- check if a database named bibiserv2 exist -->
        <available file="${domain.dir}/${domain}/db/bibiserv2" type="dir" property="bibiserv2.present" value="true"/>
        <contrib:if>
            <not>
                <isset property="bibiserv2.present"/>
            </not>
            <contrib:then>

                <echo> Database 'bibiserv2' does not exist, create database 'bibiserv2' with tables 'status', 'structure', 'item and 'manager_auth'</echo>

                <mkdir dir="${domain.dir}/${domain}/db"/>
                <exec executable="${catalina.home}/javadb/bin/ij" dir="${domain.dir}/${domain}/db">
                    <arg value="${basedir}/${config}/initialize_db.javadb"/>
                    <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
                </exec>
                <echo>IMPORTANT: Created admin user with login 'testadmin' and password 'simplepassword'!</echo>
                <structure2database src="${basedir}/${config}/BiBiServ.xml" dbURL="jdbc:derby:${domain.dir}/${domain}/db/bibiserv2" embedded="true"/>
            </contrib:then>
            <contrib:else>
                <echo> Database bibiserv2 exists. Check manually if database contains valid 'status', 'structure', 'item' and 'manager_auth' tables. </echo>
            </contrib:else>
        </contrib:if>

        
        <contrib:if>
            <available file="${domain.dir}/${domain}/config/bibiserv.properties.xml"/>
            <contrib:then>
                <input message="BiBiServ Properties file (${domain.dir}/${domain}/config/bibiserv_config.xml) is present! Overwrite (Y/N)?" validargs="Y,y,N,n" addproperty="overwrite"/>
            </contrib:then>
        </contrib:if>

        <contrib:if>
            <or>
                <not>
                    <available file="${domain.dir}/${domain}/config/bibiserv.properties.xml"/>
                </not>
                <isset property="overwrite"/>
            </or>
            <contrib:then>

                <!-- copy xml property -->
                <xml2prop src="${basedir}/config/bibiserv_config.xml" dest="${basedir}/bibiserv_config.properties"/>

                <propertyfile file="bibiserv_config.properties">
                    <entry key="lsub.bin" value="${domain.dir}/${domain}/bin/lsub"/>
                    <entry key="spooldir.base" value="${spool.dir}"/>
                    <entry key="tmpdir.base" value="${spool.dir}/tmp"/>
                    <entry key="executable.rootpath" value="${executable.dir}"/>
                </propertyfile>

                <prop2xml src="${basedir}/bibiserv_config.properties" dest="${domain.dir}/${domain}/config/bibiserv_config.xml"/>


                <echo>BiBiServ configuration file generated and copied to '${domain.dir}/${domain}/config/bibiserv_config.xml'.
                    Feel free to modify this configuration. Some things you MAY/SHOULD change in an production environment.
                    - lsub.bin, qsub.bin
                    - lsub.cpu and lsub.mem : the predefined values consider only VERY small jobs, if you run the Appserver on a high powered
                    machine or the runnings jobs have other constraints you may increase these values.
                    - spooldir.base must be accessible from all (compute grid) knots (if you use SGE compute grid to distribute your jobs)
                </echo>

            </contrib:then>
        </contrib:if>

        <!-- copy jboss el - to ${domain.dir}/${domain}/lib -->
        <!-- <copy file="${lib}/" todir="${domain.dir}/${domain}/lib"/> -->
        <copy overwrite="true" tofile="${catalina.home}/glassfish/lib/endorsed/log4j.jar">
             <!--This must return only ONE file, otherwise the copy task breaks!-->
            <fileset dir="${lib}">
                <filename name="**/log4j*.jar"/>
            </fileset>
        </copy>

        <copy overwrite="true" tofile="${catalina.home}/glassfish/lib/endorsed/xercesImpl.jar">
             <!--This must return only ONE file, otherwise the copy task breaks!-->
            <fileset dir="${lib}">
                <filename name="**/xercesImpl*.jar"/>
            </fileset>
        </copy>

        <!-- copy lsub command to ${domain.dir}/${domain}/bin/lsub -->
        <copy file="bin/lsub" todir="${domain.dir}/${domain}/bin"/>
        <chmod file="${domain.dir}/${domain}/bin/lsub" perm="755"/>

        <!-- start server instance for live configuration -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>

        <!-- modify configuration of glassfish domain -->
        <!-- append System Property : de.unibi.techfak.bibiserv.config -->
        
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-system-properties"/>
            <arg value="de.unibi.techfak.bibiserv.config=${domain.dir}/${domain}/config/bibiserv_config.xml:de.unibi.cebitec.bibiserv.manager.bardir=${bar.dir}"/>
        </exec>

        <!-- append Connection Pool for previously generated DB -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-jdbc-connection-pool"/>
            <arg value="--allownoncomponentcallers=false"/>
            <arg value="--associatewiththread=false"/>
            <arg value="--creationretryattempts=0"/>
            <arg value="--creationretryinterval=10"/>
            <arg value="--leakreclaim=false"/>
            <arg value="--leaktimeout=0"/>
            <arg value="--validationmethod=auto-commit"/>
            <arg value="--datasourceclassname=org.apache.derby.jdbc.ClientDataSource"/>
            <arg value="--failconnection=false"/>
            <arg value="--idletimeout=300"/>
            <arg value="--isconnectvalidatereq=false"/>
            <arg value="--isisolationguaranteed=false"/>
            <arg value="--lazyconnectionassociation=false"/>
            <arg value="--lazyconnectionenlistment=false"/>
            <arg value="--matchconnections=false"/>
            <arg value="--maxconnectionusagecount=0"/>
            <arg value="--maxpoolsize=32"/>
            <arg value="--maxwait=60000"/>
            <arg value="--nontransactionalconnections=false"/>
            <arg value="--poolresize=2"/>
            <arg value="--restype=javax.sql.DataSource"/>
            <arg value="--statementtimeout=1"/>
            <arg value="--steadypoolsize=8"/>
            <arg value="--validateatmostonceperiod=0"/>
            <arg value="--wrapjdbcobjects=false"/>
            <arg value="--property"/>
            <arg value="TraceFileAppend=false:RetrieveMessageText=true:SecurityMechanism=4:DatabaseName=bibiserv2:Password=APP:LoginTimeout=0:User=APP:PortNumber=${db.port}:ServerName=localhost:TraceLevel=-1"/>
            <arg value="bibiserv2_derby"/>
        </exec>

        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="--host=localhost"/>
            <arg value="--port=${admin.port}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="create-jdbc-resource"/>
            <arg value="--connectionpoolid=bibiserv2_derby"/>
            <arg value="--enabled=true"/>
            <arg value="jdbc/bibiserv2"/>
        </exec>

        <!-- live configuration done, stop server instance -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="stop-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>
    
        <!-- set jvm option -XX:MaxPermSize=512m ; using asadmin create-jvm-options doesn't work beacuse ':' is
            used as delimiter -->
        <replace file="${domain.dir}/${domain}/config/domain.xml" token="-XX:MaxPermSize=192m" value="-XX:MaxPermSize=512m"/>
            
    </target>

    <target name="_start_domain" depends="_load_config" description="start the Glassfish">
        <!-- start glassfish -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>            
            <arg value="${domain}"/>
        </exec>
    </target>
    
    

    <target name="start" depends="_load_config,_start_db,_start_domain" description="start the Glassfish AND the JavaDB Server"/>
    
    <target name="_debug_domain" depends="_load_config" description="start Glassfish appserver in debug mode">
        <!-- start glassfish in debug mode-->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="--debug"/>
            <arg value="${domain}"/>
        </exec>
    </target>
    

    <target name="debug" depends="_load_config,_start_db,_debug_domain" description="start the Glassfish and the JavaDB in DEBUG mode"/>
       
    <target name="_stop_domain" depends="_load_config" description="stop the Glassfish">
        <!-- stop glassfish -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="stop-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>
    </target>
    
    <target name="clean-db" depends="_load_config" description="clean up item entries within database">
        <exec executable="${catalina.home}/javadb/bin/ij" dir="${domain.dir}/${domain}/db">
            <arg value="${basedir}/${config}/clean_item.javadb"/>
            <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
        </exec>
        
    </target>

    <target name="stop" depends="_load_config" description="stop the Glassfish AND JavaDB Server">
        <antcall target="_stop_domain"/>       
        <antcall target="_stop_db"/>
    </target>

    <target name="build" depends="resolve" description="compile and build ant task needed to run this build script">
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
        <javac srcdir="${src}" destdir="${classes}" debug="true" classpathref="classpath"/>
        <copy file="${src}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" tofile="${classes}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties"/>
        <jar basedir="${classes}" destfile="${dist}/appserver_config_task.jar" includes="**/*"/>
    </target>

    <target name="distribution" depends="build" description="create zip distribution of project">
        <zip basedir="." destfile="${ant.project.name}.zip" >
            <zipfileset dir="." prefix="${ant.project.name}/">
                <include name="src/**"/>
                <include name="bin/**"/>
                <include name="config/**"/>
                <include name="build.xml"/>
                <include name="ivy.xml"/>
            </zipfileset>
            <exclude name="**"/>
        </zip>
        <checksum algorithm="md5" format="CHECKSUM" file="${ant.project.name}.zip"/>
    </target>

    <target name="clean" description="clean compiled classes and distribution jar">
        <delete dir="${dist}"/>
        <delete dir="${classes}"/>
        <delete dir="${lib}"/>
        <delete file="appserver_config.zip"/>
    </target>

    <target name="clean-all" depends="clean" description="clean really everything (Attention! Also, previous generated local appserver configuration files are deleted!)">
        <delete file="${local.configuration}"/>
        <delete file="${local.passwordfile}"/>
    </target>

    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

    <!-- set ivy.settings.file property -->
    <contrib:if>
        <http url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml" errorsbeginat="300"/>
        <contrib:then>
            <echo>Loading Ivy Settings from BiBiServ ... </echo>
            <ivy:settings url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml"/>
        </contrib:then>
        <contrib:else>
            <echo>BiBiserv not available, load Ivy settings from ${user.home}/ivy-rep/ivy-settings.xml or if this file does not exist load default settings file</echo>
            <ivy:settings file="${user.home}/ivy-rep/ivysettings.xml"/>
        </contrib:else>
    </contrib:if>

    <!-- use ivy to resolve  library dependencies -->
    <target name="resolve" description="retrieve dependencies with ivy">
        <mkdir dir="${lib}"/>
        <ivy:retrieve/>
    </target>

    <!-- publish current project in private ivy-repository -->
    <target name="publish" depends="resolve,_mercurial" description="publish package as module on local ivy repository">
        <ivy:publish resolver="private" validate="false" overwrite="true"
                     artifactspattern="${dist.dir}/[artifact].[ext]" pubrevision="${HG.TAG}_${HG.REVISION}"/>
    </target>

    <target name="clean-cache" description="clean ivy cache">
        <ivy:cleancache/>
    </target>

    <!-- install package from local ivy-repository on the server -->
    <target name="install" depends="distribution"
            description="install as zipped recource on bibiserv : ssh.user, ssh.key and ssh.passphrase(optional) must set as property!">
       
        <!-- load ssh specify setting from bibiserv -->
        <property url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivy_ssh.properties"/>

        <!-- check if ${ssh.key} and ${ssh.user} is set -->
        <fail unless="ssh.user"
              message="The Target &lt;install&gt; uses ssh key based authentication. Give the ssh user for ${ssh.host} as property 'ssh.user' as argument to the ant call!"/>
        <fail unless="ssh.key"
              message="The Target &lt;install&gt; uses ssh key based authentication. Give the location of your private key as property 'ssh.key' and optional a passphrase as property 'ssh.passphrase' as argument to the ant call!"/>

        <!-- copy local ivy-rep to bibiserv using porta.techfak.uni-bielefeld.de -->
        <scp   todir="${ssh.user}@${ssh.host}:${ssh.basedir}/resources" passphrase="${ssh.passphrase}"
             keyfile="${ssh.key}">
            <fileset file="${ant.project.name}.zip"/>
            <fileset file="${ant.project.name}.zip.md5"/>
        </scp>

     
    </target>

    <!-- targets for internal use only -->
    <target name="_mercurial" description="get the latest tag name and revision number">
        <exec executable="bash" outputproperty="HG.TAG">
            <arg line="-c "/>
            <arg value="hg tags | head -n 2 | grep -v tip |  cut -f 1 -d ' '  "/>
        </exec>
        <exec executable="bash" outputproperty="HG.REVISION">
            <arg line="-c "/>
            <arg value="hg tip | grep changeset: | cut -f 2 -d ':' | sed -e 's/^ *//' "/>
        </exec>
    </target>

    <target name="_start_db" depends="_load_config" description="(internal task) start the database">
        <!-- start database on localhost:${db.port} -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="start-database"/>
            <arg value="--dbhome=${domain.dir}/${domain}/db"/>
            <arg value="--dbport=${db.port}"/>
        </exec>
    </target>


    <target name="_stop_db" depends="_load_config" description="(internal task) stop the database">
        <!-- stop database -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="stop-database"/>
            <arg value="--dbport=${db.port}"/>
        </exec>
    </target>

    <target name="_load_config" description="(internal task) load configuration from file">
        <!-- check if configuration file exists -->
        <available file="local.configuration" property="config.present" value="true"/>
        <contrib:if>
            <not>
                <isset property="config.present"/>
            </not>
            <contrib:then>
                <antcall target="configure"/>
            </contrib:then>
        </contrib:if>
        <!-- load configuration -->
        <property file="local.configuration"/>
    </target>
    
    <target name="_test">
        <!-- load configuration -->
        <property file="local.configuration"/>
        <!-- recompute port numbers for database and admin port -->
        <setPorts portbase="${server.portbase}"/>
        <!-- load tasks -->
        <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" classpath="${dist}/appserver_config_task.jar"/>
        <!-- put item to database -->
        
        <item2database src="${config}/administration_team.xml" dbURL="jdbc:derby://localhost:${db.port}/bibiserv2"/>
        
    </target>
    
    <target name="install.item" description="install an item (xml decsription file) to database">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
            
        <contrib:if>
            <and>
                <isset property="item"/>
                <available file="${item}"/>  
            </and>
            <contrib:then>
                <!-- load tasks -->
                <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
                    <classpath>
                        <path  location="${dist}/appserver_config_task.jar"/> 
                        <path refid="classpath"/>
                    </classpath>
                </taskdef>
               
                <!-- put item to database -->
                <item2database src="${item}" dbURL="jdbc:derby://localhost:${db.port}/bibiserv2"/>
            </contrib:then>
            <contrib:else>
                <fail message="You must set an item property (-Ditem=...) pointing to an existing item description file!"/>
            </contrib:else>
        </contrib:if>
    </target>
    
    <target name="install.linkeditem" description="install a linked item (xml description file) to database">
        <contrib:if>
            <available file="local.configuration"/>
            <contrib:then>
                <property file="local.configuration"/>
            </contrib:then>
            <contrib:else>
                <fail message="You have to configure a domain/database to run target!"/>
            </contrib:else>
        </contrib:if>
        <contrib:if>
            <and>
                <isset property="linkeditem"/>
                <available file="${linkeditem}"/>  
            </and>
            <contrib:then>
                <!-- load tasks -->
                <taskdef resource="de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
                    <classpath>
                        <path  location="${dist}/appserver_config_task.jar"/> 
                        <path refid="classpath"/>
                    </classpath>
                </taskdef>
                <!-- put item to database -->
                <item2database src="${linkeditem}" dbURL="jdbc:derby://localhost:${db.port}/bibiserv2"/>
            </contrib:then>
            <contrib:else>
                <fail message="You must set a linkeditem property (-Dlinkeditem=...) pointing to an existing linkeditem description file!"/>
            </contrib:else>
        </contrib:if>
    </target>
    
</project>
