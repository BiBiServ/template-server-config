<?xml version="1.0" encoding="UTF-8"?>
<!-- This project can be used to configure an existing Glassfish Application Server in a BiBiServ2 compatible way. -->

<project name="appserver_config"  xmlns:ivy="antlib:org.apache.ivy.ant">
    
    <property name="src" value="src"/>
    <property name="classes" value="classes"/>
    <property name="dist" value="dist"/>
    <property name="lib" value="lib"/>

    <property name="local.configuration" value="local.configuration"/>
    <property name="local.passwordfile" value="local.passwordfile"/>
    
    <!-- include ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    
    
    <!-- Make enviroment accessible by this script -->
    <property environment="env"/>
    
    
    <target name="configure" description="check environment and configure an existing glassfish domain.">

        <!-- check if local.configuration files exists -->
        <available file="local.configuration" property="config.present" value="true"/>

        <if>
            <not>
                <isset property="config.present"/>
            </not>
            <then>
                <echo>Configuration not present . Create a new one ... </echo>

                  <!-- catalina root -->
                <if>
                    <isset property="env.CATALINA_HOME"/>
                    <then>
                        <property name="catalina.home" value="${env.CATALINA_HOME}"/>
                    </then>
                </if>
                <input message="Enter Glassfish root !" addproperty="catalina.home"/>

        <!-- domain root -->
                <if>
                    <isset property="env.DOMAIN_HOME"/>
                    <then>
                        <property name="domain.home" value="${env.DOMAIN_HOME}"/>
                    </then>
                </if>
                <input message="Enter domain root !" addproperty="domain.home"/>

        <!-- domain name -->
                <input message="Enter domain name !" addproperty="domain.name"/>
        <!-- spool dir -->
                <input message="Enter spool dir ! [e.g. /var/tmp/spool ]" addproperty="spool.dir"/>

        <!-- executable root dir -->
                <input message="Enter executable root dir [e.g.: /vol/biotools] !" addproperty="execucable.dir"/>

                       <!-- write local configuration file -->
                <propertyfile file="${local.configuration}" comment="local bibiserv2 startup properties">
                    <entry key="catalina.home" value="${catalina.home}"/>
                    <entry key="domain.dir" value="${domain.home}"/>
                    <entry key="domain" value="${domain.name}"/>
                    <entry key="admin.user" value="${admin.user}"/>
                </propertyfile>

            </then>
        </if>


      
        <available file="local.passwordfile" property="passwordfile.present" value="true"/>

        <if>
            <not>
                <isset property="passwordfile.present"/>
            </not>
            <then>
                <echo>Passwordfile not present. Create a new one ... </echo>
        
        <!-- admin user -->
                <input message="Enter admin user [e.g. admin] !" addproperty="admin.user"/>
        
        <!-- password -->
                <input message="Enter admin user password [e.g. adminadmin] !" addproperty="admin.password"/>

         <!-- master password -->
                <input message="Enter Master password [e.g. changeit] !" addproperty="masterpassword"/>
            
        <!-- write password file -->
                <propertyfile file="${local.passwordfile}">
                    <entry key="AS_ADMIN_PASSWORD" value="${admin.password}"/>
                    <entry key="AS_ADMIN_MASTERPASSWORD" value="${masterpassword}"/>
                </propertyfile>
        
        <!-- change permission on password file -->
                <chmod file="local.passwordfile" perm="600"/>

            </then>
        </if>

         <!-- add appserver_config ant task -->
        <available file="${dist}/appserver_config.jar" property="lib.present" value="true"/>
        <if>
            <not>
                <isset property="lib.present"/>
            </not>
            <then>
                <antcall target="build"/>
            </then>
        </if>

        <!--<taskdef resource="de.unibi.techfak.bibiserv.util.appserver_config.appserver_config.properties" classpath="${classes}"/>-->
        <taskdef file="src/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" classpath="${classes}"/>

         <!-- load configuration -->
        <property file="local.configuration"/>


        <!-- check if a database named bibiserv2 exist -->
        <available file="${domain.dir}/${domain}/db/bibiserv2" type="dir" property="bibiserv2.present" value="true"/>
        <if>
            <not>
                <isset property="bibiserv2.present"/>
            </not>
            <then>
                <echo> Database 'bibiserv2' does not exist, create database 'bibiserv2' with table 'status'</echo>
                <exec executable="${catalina.home}/javadb/bin/ij" dir="${domain.dir}/${domain}/db">
                    <arg value="${basedir}/config/initialize_db.javadb"/>
                    <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
                </exec>
            </then>
            <else>
                <echo> Database bibiserv2 exist, continue ... </echo>
            </else>
        </if>
        
        <available file="${domain.dir}/${domain}/config/bibiserv.properties.xml" property="bibiserv.properties.present" value="true"/>

        <if>
            <isset property="bibiserv.properties.present"/>
            <then>
                <input message="BiBiServ Properties file (${domain.dir}/${domain}/config/bibiserv.properties.xml) is present! Overwrite (Y/N)?" validargs="Y,y,N,n" addproperty="overwrite"/>
            </then>
        </if>

        <if>
            <or>
                <not>
                    <isset property="bibiserv.properties.present"/>
                </not>

            </or>
        </if>

        <!-- modify domain.xml of glassfish domain -->
        <sun-domain file="${domain.dir}/${domain}/config/domain.xml">
            
            
        </sun-domain>

        <!-- append Connection Pool for previous generated DB -->

        <!-- append JDBC Resource named jdbc/bibiserv2 associated with Connection Pool -->

        <!-- append System Property : de.unibi.techfak.bibiserv.config -->
        
    </target>
    

    

    <target name="start" description="start the Glassfish AND the JavaDB Server">



     <!-- load configuration -->
        <property file="local.configuration"/>
    
      <!-- start database on localhost:1527-->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="start-database"/>
            <arg value="--dbhome=${domain.dir}/${domain}/db"/>
        </exec>
     <!-- start glassfish -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="${domain}"/>
        </exec>
    </target>
    
    <target name="stop" description="stop the Glassfish AND JavaDB Server">
        <!-- check if configuration file exists -->
        <available file="local.configuration" property="config.present" value="true"/>
        <if>
            <not>
                <isset property="config.present"/>
            </not>
            <then>
                <antcall target="configure"/>
            </then>
        </if>
        <!-- load configuration -->
        <property file="local.configuration"/>
        <!-- stop glassfish -->
        <exec executable="${catalina.home}/bin/asadmin">
            
            <arg value="stop-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>
        <!-- stop database -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="stop-database"/>
        </exec>
    
    </target>
    
    <target name="build">
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
        <javac srcdir="${src}" destdir="${classes}" debug="true"/>
        <copy file="${src}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" tofile="${classes}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties"/>
        <jar basedir="${classes}" destfile="${dist}/appserver_config_task.jar" includes="**/*"/>
    </target>

    <target name="clean" description="clean compiled classes and distribution jar">
        <delete dir="${dist}"/>
        <delete dir="${classes}"/>
    </target>

    <target name="clean-all" depends="clean" description="clean really everything (Attention! Also, previous generated local appserver configuration files are deleted!)">
        <delete file="${local.configuration}"/>
        <delete file="${local.passwordfile}"/>
    </target>
    
    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
    
    <!-- set ivy.settings.file property -->
    <if>
        <http url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml" errorsbeginat="300"/>
        <then>
            <echo>Loading Ivy Settings from BiBiServ ... </echo>
            <ivy:settings url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml"/> 
        </then>
        <else>
            <echo>BiBiserv not available, load Ivy settings from ${user.home}/ivy-rep/ivy-settings.xml or if this file does not exist load default settings file</echo>
            <ivy:settings file="${user.home}/ivy-rep/ivysettings.xml"/>
        </else>
    </if> 
    
    <!-- use ivy to resolve  library dependencies -->
    <target name="resolve" description="retrieve dependencies with ivy">
        <ivy:retrieve/>
    </target>
     
    <target name="clean-cache" description="clean ivy cache">
        <ivy:cleancache/>
    </target>

</project>