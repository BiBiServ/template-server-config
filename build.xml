<?xml version="1.0" encoding="UTF-8"?>
<!-- This project can be used to configure an existing Glassfish Application Server in a BiBiServ2 compatible way. -->

<project name="appserver_config" basedir="." default="configure" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- directory definitions -->
    <property name="src" value="src"/>
    <property name="classes" value="classes"/>
    <property name="dist" value="dist"/>
    <property name="lib" value="lib"/>
    <property name="config" value="config"/>

    <!-- configuration files -->
    <property name="local.configuration" value="local.configuration"/>
    <property name="local.passwordfile" value="local.passwordfile"/>

    <!-- jboss expression language library, necessary until standard
    JSF (2.0) with its own EL is supported by ICEfaces -->
    <property name="jboss_el" value="jboss_el.jar"/>

    <!-- the web application archive of the bibi main app,
    allowing for an instantly runnable bibi-server after running this
    configuration -->
    <property name="bibimainapp" value="bibimainapp.war"/>

    <!-- include ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

    <!-- Make enviroment accessible by this script -->
    <property environment="env"/>

    <!-- default classpath -->
    <path id="classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>


    <target name="configure" description="check environment and configure an existing glassfish domain.">

        <!-- check if local.configuration files exists -->
        <available file="local.configuration" property="config.present" value="true"/>
        <if>
            <not>
                <isset property="config.present"/>
            </not>
            <then>
                <echo>Configuration not present . Create a new one ... </echo>

                <!-- catalina root -->
                <if>
                    <isset property="env.CATALINA_HOME"/>
                    <then>
                        <property name="catalina.home" value="${env.CATALINA_HOME}"/>
                    </then>
                </if>
                <input message="Enter Glassfish root !" addproperty="catalina.home"/>

                <!-- domain root -->
                <if>
                    <isset property="env.DOMAIN_HOME"/>
                    <then>
                        <property name="domain.dir" value="${env.DOMAIN_HOME}"/>
                    </then>
                </if>
                <input message="Enter domain root !" addproperty="domain.dir"/>

                <!-- domain name -->
                <input message="Enter domain name !" addproperty="domain.name"/>

                <!-- admin user -->
                <input message="Enter admin user [e.g. admin] !" addproperty="admin.user"/>

                <!-- spool dir -->
                <input message="Enter spool dir ! [e.g. /var/tmp/spool ]" addproperty="spool.dir"/>

                <!-- executable root dir -->
                <input message="Enter executable root dir [e.g.: /vol/biotools] !" addproperty="executable.dir"/>

                <!-- write local configuration file -->
                <propertyfile file="${local.configuration}" comment="local bibiserv2 startup properties">
                    <entry key="catalina.home" value="${catalina.home}"/>
                    <entry key="domain.dir" value="${domain.dir}"/>
                    <entry key="domain" value="${domain.name}"/>
                    <entry key="admin.user" value="${admin.user}"/>
                    <entry key="spool.dir" value="${spool.dir}"/>
                    <entry key="executable.dir" value="${excutable.dir}"/>
                </propertyfile>

            </then>
        </if>



        <available file="local.passwordfile" property="passwordfile.present" value="true"/>

        <if>
            <not>
                <isset property="passwordfile.present"/>
            </not>
            <then>
                <echo>Passwordfile not present. Create a new one ... </echo>

                <!-- password -->
                <input message="Enter admin user password [e.g. adminadmin] !" addproperty="admin.password"/>

                <!-- master password -->
                <input message="Enter Master password [e.g. changeit] !" addproperty="masterpassword"/>

                <!-- write password file -->
                <propertyfile file="${local.passwordfile}">
                    <entry key="AS_ADMIN_PASSWORD" value="${admin.password}"/>
                    <entry key="AS_ADMIN_MASTERPASSWORD" value="${masterpassword}"/>
                </propertyfile>

                <!-- change permission on password file -->
                <chmod file="local.passwordfile" perm="600"/>

            </then>
        </if>

        <!-- add appserver_config ant task -->
        <available file="${dist}/appserver_config.jar" property="lib.present" value="true"/>
        <if>
            <not>
                <isset property="lib.present"/>
            </not>
            <then>
                <antcall target="build"/>
            </then>
        </if>

        <!--<taskdef resource="de.unibi.techfak.bibiserv.util.appserver_config.appserver_config.properties" classpath="${classes}"/>-->
        <taskdef file="src/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" >
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes}"/>
            </classpath>
        </taskdef>

        <!-- load configuration -->
        <property file="local.configuration"/>

        <!-- check if a database named bibiserv2 exist -->
        <available file="${domain.dir}/${domain}/db/bibiserv2" type="dir" property="bibiserv2.present" value="true"/>
        <if>
            <not>
                <isset property="bibiserv2.present"/>
            </not>
            <then>

                <echo> Database 'bibiserv2' does not exist, create database 'bibiserv2' with table 'status', 'structure' and 'item</echo>

                <mkdir dir="${domain.dir}/${domain}/db"/>
                <exec executable="${catalina.home}/javadb/bin/ij" dir="${domain.dir}/${domain}/db">
                    <arg value="${basedir}/${config}/initialize_db.javadb"/>
                    <env key="DERBY_HOME" value="${catalina.home}/javadb"/>
                </exec>
                <structure2database src="${config}/BiBiServ.xml" dbURL="jdbc:derby:${domain.dir}/${domain}/db/bibiserv2" embedded="true"/>
            </then>
            <else>
                <echo> Database bibiserv2 exists. Check manually if database contains a valid 'status', 'structure' and 'item' table. </echo>
            </else>
        </if>

        <available file="${domain.dir}/${domain}/config/bibiserv.properties.xml" property="bibiserv_config.xml" value="true"/>
        <if>
            <isset property="bibiserv.properties.present"/>

            <then>
                <input message="BiBiServ Properties file (${domain.dir}/${domain}/config/bibiserv_config.xml) is present! Overwrite (Y/N)?" validargs="Y,y,N,n" addproperty="overwrite"/>
            </then>
        </if>

        <if>
            <or>
                <not>
                    <isset property="bibiserv.properties.present"/>
                </not>
                <isset property="overwrite"/>
            </or>
            <then>

                <!-- copy xml property -->
                <xml2prop src="config/bibiserv_config.xml" dest="bibiserv_config.properties"/>

                <propertyfile file="bibiserv_config.properties">
                    <entry key="lsub.bin" value="${domain.dir}/${domain}/bin/lsub"/>
                    <entry key="spooldir.base" value="${spool.dir}"/>
                    <entry key="tmpdir.base" value="${spool.dir}/tmp"/>
                    <entry key="executable.root.path" value="${executable.dir}"/>
                </propertyfile>

                <prop2xml src="bibiserv_config.properties" dest="${domain.dir}/${domain}/config/bibiserv_config.xml"/>


                <echo>BiBiServ configuration file generated and copied to '${domain.dir}/${domain}/config/bibiserv_config.xml'.
                    Feel free to modify this configuration. Some things you MAY/SHOULD change in an production environment.
                    - lsub.bin, qsub.bin
                    - lsub.cpu and lsub.mem : the predefined values consider only VERY small jobs, if you run the Appserver on a high powered
                    machine or the runnings jobs have other constraints you may increase these values.
                    - spooldir.base must be accessible from all (compute grid) knots (if you use SGE compute grid to distribute your jobs)
                </echo>

            </then>
        </if>

        <!-- copy jboss el - to ${domain.dir}/${domain}/lib -->
        <!-- <copy file="${lib}/" todir="${domain.dir}/${domain}/lib"/> -->
        <copy overwrite="true" tofile="${domain.dir}/${domain}/lib/${jboss_el}">
            <!-- This must return only ONE file, otherwise th copy task breaks! -->
            <fileset dir="${lib}">
                <filename name="**/jboss-el*.jar"/>
            </fileset>
        </copy>

        <!-- copy lsub command to ${domain.dir}/${domain}/bin/lsub -->
        <copy file="bin/lsub" todir="${domain.dir}/${domain}/bin"/>
        <chmod file="${domain.dir}/${domain}/bin/lsub" perm="755"/>

        <!-- check if autodeploy directory exists -->
        <available file="${domain.dir}/${domain}/autodeploy" type="dir" property="autodeploydir.present" value="true"/>
        <if>
            <not>
                <isset property="autodeploydir.present"/>
            </not>
            <then>
                <echo> 'autodeploy' directory is missing in domain. Creating 'autodeploy' directory.</echo>
                <mkdir dir="${domain.dir}/${domain}/autodeploy"/>
            </then>
        </if>

        <!-- copy bibimainapp to auto-deploy-dir for instant runnable server :-) -->
        <copy overwrite="true" tofile="${domain.dir}/${domain}/autodeploy/${bibimainapp}">
            <!-- This must return only ONE file, otherwise th copy task breaks! -->
            <fileset dir="${lib}">
                <filename name="**/bibimainapp*.war"/>
            </fileset>
        </copy>

        <!-- create BAR dir -->
        <property name="bar.dir" value="${domain.dir}/${domain}/bar"/>
        <mkdir dir="${bar.dir}"/>

        <!-- modify domain.xml of glassfish domain -->
        <!--<sunapp-domain file="${domain.dir}/${domain}/config/domain.xml">-->
        <sunapp_domain file="${domain.dir}/${domain}/config/domain.xml">
            <!-- append System Property : de.unibi.techfak.bibiserv.config -->
            <sunapp_systemproperty key="de.unibi.techfak.bibiserv.config" value="${domain.dir}/${domain}/config/bibiserv_config.xml"/>
            <sunapp_systemproperty key="de.unibi.cebitec.bibiserv.manager.bardir" value="${bar.dir}"/>
            <!-- append Connection Pool for previous generated DB -->
            <sunapp_jdbc_connection_pool
                allownoncomponentcallers="false"
                associatewiththread="false"
                connectioncreationretryattempts="0"
                connectioncreationretryintervalinseconds="10"
                connectionleakreclaim="false"
                connectionleaktimeoutinseconds="0"
                connectionvalidationmethod="auto-commit"
                datasourceclassname="org.apache.derby.jdbc.ClientDataSource"
                failallconnections="false"
                idletimeoutinseconds="300"
                isconnectionvalidationrequired="false"
                isisolationlevelguaranteed="false"
                lazyconnectionassociation="false"
                lazyconnectionenlistment="false"
                matchconnections="false"
                maxconnectionusagecount="0"
                maxpoolsize="32"
                maxwaittimeinmillis="60000"
                name="bibiserv2_derby"
                nontransactionalconnections="false"
                poolresizequantity="2"
                restype="javax.sql.DataSource"
                statementtimeoutinseconds="1"
                steadypoolsize="8"
                validateatmostonceperiodinseconds="0"
                wrapjdbcobjects="false">
                <sunapp_property name="TraceFileAppend" value="false"/>
                <sunapp_property name="RetrieveMessageText" value="true"/>
                <sunapp_property name="SecurityMechanism" value="4"/>
                <sunapp_property name="DatabaseName" value="bibiserv2"/>
                <sunapp_property name="Password" value="APP"/>
                <sunapp_property name="LoginTimeout" value="0"/>
                <sunapp_property name="User" value="APP"/>
                <sunapp_property name="PortNumber" value="1527"/>
                <sunapp_property name="ServerName" value="localhost"/>
                <sunapp_property name="TraceLevel" value="-1"/>
            </sunapp_jdbc_connection_pool>
            <!-- append JDBC Resource named jdbc/bibiserv2 associated with Connection Pool -->
            <sunapp_jdbc_resource
                enabled="true"
                jndiname="jdbc/bibiserv2"
                objecttype="user"
                poolname="bibiserv2_derby"/>
            <!-- modify existing java-config -->
            <sunapp_java_config
                classpath_prefix="${domain.dir}/${domain}/lib/${jboss_el}" mode="replace"/>
        </sunapp_domain>
    </target>

    <target name="start" description="start the Glassfish AND the JavaDB Server">
        <!-- load configuration -->
        <property file="local.configuration"/>

        <!-- start database on localhost:1527-->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="start-database"/>
            <arg value="--dbhome=${domain.dir}/${domain}/db"/>
        </exec>
        <!-- start glassfish -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="start-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="--user=${admin.user}"/>
            <arg value="--passwordfile=${local.passwordfile}"/>
            <arg value="${domain}"/>
        </exec>
    </target>

    <target name="stop" description="stop the Glassfish AND JavaDB Server">
        <!-- check if configuration file exists -->
        <available file="local.configuration" property="config.present" value="true"/>
        <if>
            <not>
                <isset property="config.present"/>
            </not>
            <then>
                <antcall target="configure"/>
            </then>
        </if>
        <!-- load configuration -->
        <property file="local.configuration"/>
        <!-- stop glassfish -->
        <exec executable="${catalina.home}/bin/asadmin">

            <arg value="stop-domain"/>
            <arg value="--domaindir=${domain.dir}"/>
            <arg value="${domain}"/>
        </exec>
        <!-- stop database -->
        <exec executable="${catalina.home}/bin/asadmin">
            <arg value="stop-database"/>
        </exec>

    </target>

    <target name="build" depends="resolve" description="compile and build ant task needed to run this build script">
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
        <javac srcdir="${src}" destdir="${classes}" debug="true" classpathref="classpath"/>
        <copy file="${src}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties" tofile="${classes}/de/unibi/techfak/bibiserv/util/appserver_config/appserver_config.properties"/>
        <jar basedir="${classes}" destfile="${dist}/appserver_config_task.jar" includes="**/*"/>
    </target>

    <target name="distribution" depends="build" description="create zip distribution of project">
        <zip basedir="." destfile="appserver_config.zip" >
            <zipfileset dir="." prefix="${ant.project.name}/">
                <include name="src/**"/>
                <include name="bin/**"/>
                <include name="config/**"/>
                <include name="build.xml"/>
                <include name="ivy.xml"/>
            </zipfileset>
            <exclude name="**"/>
        </zip>
    </target>

    <target name="clean" description="clean compiled classes and distribution jar">
        <delete dir="${dist}"/>
        <delete dir="${classes}"/>
        <delete file="appserver_config.zip"/>
    </target>

    <target name="clean-all" depends="clean" description="clean really everything (Attention! Also, previous generated local appserver configuration files are deleted!)">
        <delete file="${local.configuration}"/>
        <delete file="${local.passwordfile}"/>
    </target>

    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

    <!-- set ivy.settings.file property -->
    <if>
        <http url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml" errorsbeginat="300"/>
        <then>
            <echo>Loading Ivy Settings from BiBiServ ... </echo>
            <ivy:settings url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml"/>
        </then>
        <else>
            <echo>BiBiserv not available, load Ivy settings from ${user.home}/ivy-rep/ivy-settings.xml or if this file does not exist load default settings file</echo>
            <ivy:settings file="${user.home}/ivy-rep/ivysettings.xml"/>
        </else>
    </if>

    <!-- use ivy to resolve  library dependencies -->
    <target name="resolve" description="retrieve dependencies with ivy">
        <ivy:retrieve/>
    </target>

    <!-- publish current project in private ivy-repository -->
    <target name="publish" depends="resolve,_mercurial" description="publish package as module on local ivy repository">
        <ivy:publish resolver="private" validate="false" overwrite="true"
                     artifactspattern="${dist.dir}/[artifact].[ext]" pubrevision="${HG.TAG}_${HG.REVISION}"/>
    </target>

    <target name="clean-cache" description="clean ivy cache">
        <ivy:cleancache/>
    </target>

    <!-- install package from local ivy-repository on the server -->
    <target name="install" depends="resolve,_mercurial"
            description="install published package on bibiserv repository : ssh.user, ssh.key and ssh.passphrase(optional) must set as property!">

        <!-- create local ivy-rep as install base -->
        <mkdir dir="ivy-rep"/>
        <ivy:publish resolver="local" validate="false" overwrite="true"
                     artifactspattern="${dist.dir}/[artifact].[ext]" pubrevision="${HG.TAG}_${HG.REVISION}"/>

        <!-- load ssh specify setting from bibiserv -->
        <property url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivy_ssh.properties"/>

        <!-- check if ${ssh.key} and ${ssh.user} is set -->
        <fail unless="ssh.user"
              message="The Target &lt;install&gt; uses ssh key based authentication. Give the ssh user for ${ssh.host} as property 'ssh.user' as argument to the ant call!"/>
        <fail unless="ssh.key"
              message="The Target &lt;install&gt; uses ssh key based authentication. Give the location of your private key as property 'ssh.key' and optional a passphrase as property 'ssh.passphrase' as argument to the ant call!"/>

        <!-- copy local ivy-rep to bibiserv using porta.techfak.uni-bielefeld.de -->
        <scp todir="${ssh.user}@${ssh.host}:${ssh.basedir}/ivy-rep" passphrase="${ssh.passphrase}"
             keyfile="${ssh.key}">
            <fileset dir="ivy-rep"/>
        </scp>

        <!-- change file AND directory permission on remote sevrver -->
        <sshexec host="${ssh.host}" username="${ssh.user}" keyfile="${ssh.key}"
                 passphrase="${ssh.passphrase}"
                 command="find -L ${ssh.basedir}/ivy-rep -type d -user ${ssh.user} | xargs chmod g+ws; find -L ${ssh.basedir}/ivy-rep -type f -user ${ssh.user} | xargs chmod g+w "
                 />
    </target>

    <!-- target, for internal use only -->
    <target name="_mercurial" description="get the latest tag name and revision number">
        <exec executable="bash" outputproperty="HG.TAG">
            <arg line="-c "/>
            <arg value="hg tags | head -n 2 | grep -v tip |  cut -f 1 -d ' '  "/>
        </exec>
        <exec executable="bash" outputproperty="HG.REVISION">
            <arg line="-c "/>
            <arg value="hg tip | grep changeset: | cut -f 2 -d ':' | sed -e 's/^ *//' "/>
        </exec>
    </target>
</project>